// utils/generateHymnImports.ts

import fs from 'fs';
import path from 'path';

const hymnsDir = path.join(__dirname, '../assets/hymns');
const outputFile = path.join(__dirname, 'hymn.ts');

function generateHymnImports() {
  const categories = fs.readdirSync(hymnsDir).filter(f => 
    fs.statSync(path.join(hymnsDir, f)).isDirectory()
  );

  let imports: string[] = [];
  let hymnStructure: string[] = [];
  let hymnCounter = 1;

  categories.forEach((category) => {
    const categoryPath = path.join(hymnsDir, category);
    const hymnFiles = fs.readdirSync(categoryPath).filter(f => f.endsWith('.json'));
    
    const categoryImports: string[] = [];
    const categoryEntries: string[] = [];

    hymnFiles.forEach((hymnFile) => {
      const importName = `hymn${hymnCounter++}`;
      const importPath = `../assets/hymns/${category}/${hymnFile.replace(/\s/g, '\\ ')}`;
      
      // Use exact filename without .json
      const hymnName = hymnFile.replace(/\.json$/, '');
      
      categoryImports.push(`import ${importName} from '${importPath}';`);
      categoryEntries.push(`'${hymnName.replace(/'/g, "\\'")}': ${importName}`);
    });

    imports.push(...categoryImports);
    hymnStructure.push(`${category}: {\n  ${categoryEntries.join(',\n  ')}\n}`);
  });

  const outputContent = `// Auto-generated by generateHymnImports.ts
// utils/hymnIndex.ts

${imports.join('\n')}

export type HymnContent = {
  title: string;
  index: number;
  key: string;
  images: string[];
  content: {
    type: string;
    verses: string[];
  };
};

type Hymns = {
  [category: string]: {
    [title: string]: HymnContent;
  };
};

export const hymns: Hymns = {
  ${hymnStructure.join(',\n  ')}
};

export const getHymnTitles = () => {
  return Object.entries(hymns).flatMap(([category, hymnsInCategory]) =>
    Object.keys(hymnsInCategory).map(title => ({
      title,
      category,
    }))
  ).sort((a, b) => a.title.localeCompare(b.title));
};

export const getHymn = (category: string, title: string): HymnContent | undefined => {
  return hymns[category]?.[title];
};
`;

  fs.writeFileSync(outputFile, outputContent);
  console.log('Hymn index generated successfully!');
}

generateHymnImports();